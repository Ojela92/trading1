import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.tree import DecisionTreeRegressor
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Concatenate
import matplotlib.pyplot as plt

# Descargar datos históricos de Bitcoin y calcular indicadores técnicos
btc_data = yf.download('BTC-USD', start='2020-01-01', end='2022-01-01')
btc_data['SMA_50'] = btc_data['Close'].rolling(window=50).mean()
btc_data['RSI'] = ta.RSI(btc_data['Close'], timeperiod=14)
btc_data['Daily_Return'] = btc_data['Close'].pct_change()

# Eliminar NaNs generados por la creación de indicadores
btc_data.dropna(inplace=True)

# Seleccionar variables independientes y dependientes
independent_vars = ['SMA_50', 'RSI']
X = btc_data[independent_vars]
y = btc_data['Daily_Return']

# Dividir el conjunto de datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Escalar los datos para mejorar la convergencia de la red neuronal
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Construir y entrenar el modelo de árbol de decisión
tree_model = DecisionTreeRegressor(random_state=42)
tree_model.fit(X_train, y_train)

# Hacer predicciones con el modelo de árbol de decisión
tree_predictions = tree_model.predict(X_test)

# Construir el modelo de red neuronal
nn_model = Sequential()
nn_model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
nn_model.add(Dense(32, activation='relu'))
nn_model.add(Dense(1, activation='linear'))

# Compilar el modelo de red neuronal
nn_model.compile(optimizer='adam', loss='mean_squared_error')

# Entrenar el modelo de red neuronal
nn_model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, verbose=0)

# Hacer predicciones con el modelo de red neuronal
nn_predictions = nn_model.predict(X_test_scaled)

# Combinar las predicciones de ambos modelos
combined_predictions = (tree_predictions + nn_predictions.flatten()) / 2

# Evaluar el rendimiento del modelo combinado
mse_combined = mean_squared_error(y_test, combined_predictions)
r2_combined = r2_score(y_test, combined_predictions)

# Mostrar resultados
print(f'Mean Squared Error (Tree): {mean_squared_error(y_test, tree_predictions)}')
print(f'R-squared (Tree): {r2_score(y_test, tree_predictions)}')
print(f'Mean Squared Error (Neural Network): {mean_squared_error(y_test, nn_predictions)}')
print(f'R-squared (Neural Network): {r2_score(y_test, nn_predictions)}')
print(f'Mean Squared Error (Combined): {mse_combined}')
print(f'R-squared (Combined): {r2_combined}')

# Visualizar las predicciones comparadas con los valores reales
plt.scatter(y_test, combined_predictions, label='Combined Predictions')
plt.scatter(y_test, tree_predictions, label='Tree Predictions')
plt.scatter(y_test, nn_predictions, label='Neural Network Predictions')
plt.xlabel('Valores Reales')
plt.ylabel('Predicciones')
plt.title('Comparación de Modelos')
plt.legend()
plt.show()
